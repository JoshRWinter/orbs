#include <stdexcept>
#include <fstream>
#include <string>

#ifdef _WIN32
#include <windows.h>
#else
#include <wordexp.h>
#endif

#include "ConfigManager.h"

static const char *defaulttext =
"# this file generated by the Orbs screensaver\n"
"# edit this file to control some basic settings\n"
"# syntax:\n"
"# configsetting=value\n"
"orbcount=10\n"
;

ConfigManager::ConfigManager(const char **settings)
{
	const std::string path = ConfigManager::location();

	std::ifstream in(path);
	if(!in)
	{
		ConfigManager::create(path);
		in.open(path);
		if(!in)
			throw std::runtime_error("could not open config file!");
	}

	int lineno = 0;
	while(in.good())
	{
		++lineno;

		std::string line;
		std::getline(in, line);
		if(line.length() < 1 || line == "\n" || line[0] == '#')
			continue;

		// separate the setting from the parameter
		const auto pos = line.find("=");
		if(pos == std::string::npos)
			throw std::runtime_error(path + " -- Syntax error on line " + std::to_string(lineno) + ", expected equal sign");

		std::pair<std::string, std::string> pair;
		pair.first = line.substr(0, pos);
		pair.second = pos + 1 < line.length() ? line.substr(pos + 1) : "";
		params.insert(pair);
	}

	// check params to make sure they are all valid
	for(const auto [setting, param] : params)
	{
		int index = 0;
		bool found = false;

		while(settings[index] != NULL)
		{
			if(setting == settings[index])
			{
				found = true;
				break;
			}

			++index;
		}

		if(!found)
			throw std::runtime_error(path + " -- Unrecognized setting: \"" + setting + "\"");
	}
}

void ConfigManager::create(const std::string &loc)
{
	std::ofstream out(loc);
	if(!out)
		return;

	out << defaulttext;
}

std::string ConfigManager::location()
{
#ifdef _WIN32
	char buffer[1000] = "none";
	if(ExpandEnvironmentStrings("%appdata%\\orb-config.txt", buffer, sizeof(buffer) - 2) == 0)
		throw std::runtime_error("could not expand config file location");

	return buffer;
#else
	wordexp_t exp;

	if(wordexp("~/.orbs-config", &exp, 0))
		throw std::runtime_error("could not expand config file location.");

	std::string loc = exp.we_wordv[0];
	wordfree(&exp);

	return loc;
#endif
}
